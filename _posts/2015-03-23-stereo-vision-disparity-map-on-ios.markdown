---
layout: post
title:  "Yuliya and Chris: Stereo Vision: Disparity Map on iOS"
date:   2015-03-23 11:00:00
categories: jekyll update
---



### Stereo Vision: Disparity Map on iOS
-------------

#### Creating a Disparity Map: OpenCV

To test the stereo vision approach with a jitter generated by a single phone Chris and I had to connect our project. Consequencially, my part had to be moved to iOS, so we had to download OpenCV for iOS and rewrite the disparity map code in Objective C++. While the transition was promising to be smooth, we still had to overcome some roadblocks.

#### Roadblocks

It was interesting to note that we cannot instantiate the StereoSGBM constructor the way the documentation suggests. Chris has found a workaround using a create() method which theb returns a pointer to our object. 

It was mostly the documentation that has provided the most difficulties during the transition. For example, one of the required StereoSGBM parameters in the iOS version was not mentioned in the docs, so we had to perform some research to verify whether it can be mapped to the other parameters. It turned out that it was one of the existing parameters with a different type. 

During the tests of our transferred disparity map code we have discovered that the disparity map code seemed to not being executed. We have invested quite a lot of time to check whether this is caused by a silent failure in the OpenCV. At this point in time we were not sure whether the workaround with the create() method was working properly. Finally, we have attempted to change the parameter discussed above which, according to the docs, would result in higher quality of computation. The docs have mentioned that this should slow down the performance, so, in order to compensate for that, we have reduced the size of the image being taken. After this, we have started to obtain some results but it seemed to us that the images were just taken too fast and thus the computation did not have enough time to complete. We have reduced the speed of images taken to every 1/4 of a second and started to obtain results from that point. 


#### Conclusions
At the moment, we have transferred disparity map calculation and obstacle detection to iOS and are working on transferring the sound component. However, we are quite concerned as the disparity maps produced do not visually seem to produce consistent results. As a proof of concept, we should test our prototype in a low-reflection environment. One other factor which is extremely important is the jitter itself as it could produce inconsistent level of distortion. 

PS: Oh, and we have killed an iPhone with it.